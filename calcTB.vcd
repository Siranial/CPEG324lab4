$date
  Thu May 19 13:10:36 2022
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module calc_tb $end
$var reg 8 ! instr[7:0] $end
$var reg 1 " clk $end
$var reg 1 # reset $end
$var reg 8 $ print[7:0] $end
$scope module calculator $end
$var reg 8 % instr[7:0] $end
$var reg 1 & clk $end
$var reg 1 ' reset $end
$var reg 8 ( print[7:0] $end
$var reg 1 ) rdsel $end
$var reg 1 * we $end
$var reg 1 + immsel $end
$var reg 1 , addsubsel $end
$var reg 2 - rdin[1:0] $end
$var reg 8 . signextimm[7:0] $end
$var reg 8 / rscon[7:0] $end
$var reg 8 0 rtcon[7:0] $end
$var reg 8 1 writedata[7:0] $end
$var reg 8 2 adderout[7:0] $end
$scope module contr $end
$var reg 2 3 op[1:0] $end
$var reg 2 4 func[1:0] $end
$var reg 1 5 rdsel $end
$var reg 1 6 we $end
$var reg 1 7 immsel $end
$var reg 1 8 addsubsel $end
$upscope $end
$scope module rdmux $end
$var reg 2 9 a[1:0] $end
$var reg 2 : b[1:0] $end
$var reg 1 ; s $end
$var reg 2 < y[1:0] $end
$upscope $end
$scope module immux $end
$var reg 8 = a[7:0] $end
$var reg 8 > b[7:0] $end
$var reg 1 ? s $end
$var reg 8 @ y[7:0] $end
$upscope $end
$scope module regbank $end
$var reg 8 A wd[7:0] $end
$var reg 2 B ws[1:0] $end
$var reg 2 C rs1[1:0] $end
$var reg 2 D rs2[1:0] $end
$var reg 1 E clk $end
$var reg 1 F we $end
$var reg 8 G rd1[7:0] $end
$var reg 8 H rd2[7:0] $end
$var reg 4 I w[3:0] $end
$var reg 8 J r0[7:0] $end
$var reg 8 K r1[7:0] $end
$var reg 8 L r2[7:0] $end
$var reg 8 M r3[7:0] $end
$scope module demuxws $end
$var reg 1 N i $end
$var reg 2 O s[1:0] $end
$var reg 4 P y[3:0] $end
$upscope $end
$scope module reg0 $end
$var reg 8 Q i[7:0] $end
$var reg 1 R clock $end
$var reg 1 S enable $end
$var reg 8 T o[7:0] $end
$upscope $end
$scope module reg1 $end
$var reg 8 U i[7:0] $end
$var reg 1 V clock $end
$var reg 1 W enable $end
$var reg 8 X o[7:0] $end
$upscope $end
$scope module reg2 $end
$var reg 8 Y i[7:0] $end
$var reg 1 Z clock $end
$var reg 1 [ enable $end
$var reg 8 \ o[7:0] $end
$upscope $end
$scope module reg3 $end
$var reg 8 ] i[7:0] $end
$var reg 1 ^ clock $end
$var reg 1 _ enable $end
$var reg 8 ` o[7:0] $end
$upscope $end
$scope module muxrd1 $end
$var reg 8 a i0[7:0] $end
$var reg 8 b i1[7:0] $end
$var reg 8 c i2[7:0] $end
$var reg 8 d i3[7:0] $end
$var reg 2 e s[1:0] $end
$var reg 8 f y[7:0] $end
$upscope $end
$scope module muxrd2 $end
$var reg 8 g i0[7:0] $end
$var reg 8 h i1[7:0] $end
$var reg 8 i i2[7:0] $end
$var reg 8 j i3[7:0] $end
$var reg 2 k s[1:0] $end
$var reg 8 l y[7:0] $end
$upscope $end
$upscope $end
$scope module adder $end
$var reg 8 m a[7:0] $end
$var reg 8 n b[7:0] $end
$var reg 1 o s $end
$var reg 8 p y[7:0] $end
$var reg 8 q negb[7:0] $end
$var reg 8 r muxout[7:0] $end
$var reg 7 s carry[6:0] $end
$scope module tc $end
$var reg 8 t i[7:0] $end
$var reg 8 u o[7:0] $end
$var reg 7 v c[6:0] $end
$upscope $end
$scope module m2t1 $end
$var reg 8 w a[7:0] $end
$var reg 8 x b[7:0] $end
$var reg 1 y s $end
$var reg 8 z y[7:0] $end
$upscope $end
$scope module fa0 $end
$var reg 1 { a $end
$var reg 1 | b $end
$var reg 1 } cin $end
$var reg 1 !" o $end
$var reg 1 "" cout $end
$upscope $end
$scope module fa1 $end
$var reg 1 #" a $end
$var reg 1 $" b $end
$var reg 1 %" cin $end
$var reg 1 &" o $end
$var reg 1 '" cout $end
$upscope $end
$scope module fa2 $end
$var reg 1 (" a $end
$var reg 1 )" b $end
$var reg 1 *" cin $end
$var reg 1 +" o $end
$var reg 1 ," cout $end
$upscope $end
$scope module fa3 $end
$var reg 1 -" a $end
$var reg 1 ." b $end
$var reg 1 /" cin $end
$var reg 1 0" o $end
$var reg 1 1" cout $end
$upscope $end
$scope module fa4 $end
$var reg 1 2" a $end
$var reg 1 3" b $end
$var reg 1 4" cin $end
$var reg 1 5" o $end
$var reg 1 6" cout $end
$upscope $end
$scope module fa5 $end
$var reg 1 7" a $end
$var reg 1 8" b $end
$var reg 1 9" cin $end
$var reg 1 :" o $end
$var reg 1 ;" cout $end
$upscope $end
$scope module fa6 $end
$var reg 1 <" a $end
$var reg 1 =" b $end
$var reg 1 >" cin $end
$var reg 1 ?" o $end
$var reg 1 @" cout $end
$upscope $end
$scope module fa7 $end
$var reg 1 A" a $end
$var reg 1 B" b $end
$var reg 1 C" cin $end
$var reg 1 D" o $end
$var reg 1 E" cout $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b10000001 !
0"
0#
b00000000 $
b10000001 %
0&
0'
b00000000 (
1)
1*
0+
0,
b00 -
b00000001 .
b00000000 /
b00000000 0
b00000001 1
b00000000 2
b10 3
b01 4
15
16
07
08
b01 9
b00 :
1;
b00 <
b00000001 =
b00000000 >
0?
b00000001 @
b00000001 A
b00 B
b00 C
b00 D
0E
1F
b00000000 G
b00000000 H
b0001 I
b00000000 J
b00000000 K
b00000000 L
b00000000 M
1N
b00 O
b0001 P
b00000001 Q
0R
1S
b00000000 T
b00000001 U
0V
0W
b00000000 X
b00000001 Y
0Z
0[
b00000000 \
b00000001 ]
0^
0_
b00000000 `
b00000000 a
b00000000 b
b00000000 c
b00000000 d
b00 e
b00000000 f
b00000000 g
b00000000 h
b00000000 i
b00000000 j
b00 k
b00000000 l
b00000000 m
b00000000 n
0o
b00000000 p
b00000000 q
b00000000 r
b0000000 s
b00000000 t
b00000000 u
b1111111 v
b00000000 w
b00000000 x
0y
b00000000 z
0{
0|
0}
0!"
0""
0#"
0$"
0%"
0&"
0'"
0("
0)"
0*"
0+"
0,"
0-"
0."
0/"
00"
01"
02"
03"
04"
05"
06"
07"
08"
09"
0:"
0;"
0<"
0="
0>"
0?"
0@"
0A"
0B"
0C"
0D"
0E"
#1000000
1"
b00000001 $
1&
b00000001 (
b00000001 /
b00000001 0
b00000010 2
b00000010 >
1E
b00000001 G
b00000001 H
b00000001 J
1R
b00000001 T
1V
1Z
1^
b00000001 a
b00000001 f
b00000001 g
b00000001 l
b00000001 m
b00000001 n
b00000010 p
b11111111 q
b00000001 r
b0000001 s
b00000001 t
b11111111 u
b0000000 v
b00000001 w
b11111111 x
b00000001 z
1{
1|
0!"
1""
1%"
1&"
#2000000
b11000000 !
0"
b11000000 %
0&
0)
0*
1+
1,
b00000000 .
b00000000 1
b00000000 2
b11 3
b00 4
05
06
17
18
b00 9
0;
b00000000 =
b00000000 >
1?
b00000000 @
b00000000 A
0E
0F
b0000 I
0N
b0000 P
b00000000 Q
0R
0S
b00000000 U
0V
b00000000 Y
0Z
b00000000 ]
0^
1o
b00000000 p
b11111111 r
b1111111 s
1y
b11111111 z
1$"
0&"
1'"
1)"
1*"
0+"
1,"
1."
1/"
00"
11"
13"
14"
05"
16"
18"
19"
0:"
1;"
1="
1>"
0?"
1@"
1B"
1C"
0D"
1E"
#3000000
1"
1&
1E
1R
1V
1Z
1^
#4000000
